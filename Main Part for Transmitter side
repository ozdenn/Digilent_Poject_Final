

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity main is
    Port ( clk : in  STD_LOGIC;
           --reset : in  STD_LOGIC;
           hsync : out  STD_LOGIC;
           vsync : out  STD_LOGIC;
--			  address_observe:OUT STD_LOGIC_VECTOR (13 downto 0);
           VGA_out_red : out  std_logic_vector(3 downto 0);
           VGA_out_green : out  std_logic_vector(3 downto 0);			 
           VGA_out_blue : out  std_logic_vector(3 downto 0);
			  --Reader--
			  ledreader : out std_logic_vector(2 downto 0);
			  --receiver--
			   RxD : in std_logic;
--				rx_done : inout std_logic;
				T_Done : in std_logic;
				R_ACK : inout std_logic;
				transmitter_ck  : in std_logic;
				ChSel: in std_logic;					
			   LED : out std_logic_vector( 3 downto 0)	
				
			  );
end main;

architecture Behavioral of main is
signal reset : std_logic;
signal clk_25,rx_done     : STD_LOGIC;
signal rows     	: STD_LOGIC_VECTOR (9 downto 0);
signal cols     	: STD_LOGIC_VECTOR (9 downto 0);
signal datamem,datamem_vga,datamem_rx   : STD_LOGIC_VECTOR (2 downto 0);
signal enormal  	: std_logic;
signal address,adress_vga,adress_rx  	: STD_LOGIC_VECTOR (12 downto 0);
signal dataread 	: STD_LOGIC_VECTOR (2 downto 0);
signal dataencryp : STD_LOGIC_VECTOR (2 downto 0);
signal colors     : STD_LOGIC_VECTOR (2 downto 0);
signal q :  STD_LOGIC_VECTOR (27 downto 0) := (others => '0');
signal ram_clk :std_logic;
signal eencryp  	: std_logic;

component reader is
    Port ( clk, reset : in  STD_LOGIC;
           row : in  STD_LOGIC_VECTOR (9 downto 0);
           col : in  STD_LOGIC_VECTOR (9 downto 0);
           addr : out  STD_LOGIC_VECTOR (12 downto 0);
			  ledreader : out std_logic_vector(2 downto 0);
           ennormal,enencryp  : out std_logic;
			  datain : in  STD_LOGIC_VECTOR (2 downto 0);
			  dataout : out  STD_LOGIC_VECTOR (2 downto 0));
end component;


COMPONENT Rx
	PORT(
		CLK : IN std_logic;
		RxD : IN std_logic;
		transmitter_ck : IN std_logic;
		adress : out std_logic_vector(12 downto 0);          
		Data : OUT std_logic_vector(2 downto 0);
      T_Done : in std_logic;		
		rx_done : inout std_logic;
      R_ACK : inout std_logic;		
		reset : OUT std_logic;
		LED : out std_logic_vector( 3 downto 0);	
		ChSel : in std_logic
		);
	END COMPONENT;


component vga_controller is
    Port ( clk : in  STD_LOGIC;
           reset : in  STD_LOGIC;
			  VGA_in_red : in std_logic_vector(3 downto 0);
			  VGA_in_green : in std_logic_vector(3 downto 0);
			  VGA_in_blue : in std_logic_vector(3 downto 0);
           col : out  STD_LOGIC_VECTOR (9 downto 0);
           row : out  STD_LOGIC_VECTOR (9 downto 0);
			  VGA_out_red : out std_logic_vector(3 downto 0);
			  VGA_out_green : out std_logic_vector(3 downto 0);
			  VGA_out_blue : out std_logic_vector(3 downto 0);
           hsync : out  STD_LOGIC;
           vsync : out  STD_LOGIC);

end component;

COMPONENT asdasda
  PORT (
    a : IN STD_LOGIC_VECTOR(12 DOWNTO 0);
    d : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    clk : IN STD_LOGIC;
    we : IN STD_LOGIC;
    spo : OUT STD_LOGIC_VECTOR(2 DOWNTO 0)
  );
END COMPONENT;
--

begin
--
datamem <= datamem_vga when reset='0' else datamem_rx;
ram_clk <= transmitter_ck when T_Done='0' else q(1);

Inst_Rx: Rx PORT MAP(
		CLK => clk,
		RxD => RxD,
		transmitter_ck => transmitter_ck ,
		adress => adress_rx,
		Data => datamem_rx ,
		reset =>reset ,
		R_ACK => R_ACK,
		rx_done => rx_done,
		LED => LED,
		T_Done => T_Done,
		ChSel => Chsel
	);
--address_observe <= address;
u0: reader
    Port map ( clk      => ram_clk,  --transmitter_ck --en son transmiiter_ck-- ,--q(1),
	            reset    => reset,
               row      => rows,
               col      => cols,
               addr     => adress_vga,
               ennormal => enormal,
					enencryp => eencryp,
					ledreader => ledreader ,
			      datain   => datamem_vga,
			      dataout  => colors);


VGA_CONTROLLER_1: vga_controller
    Port map ( clk                       => q(1),
					reset                     => reset,
					VGA_in_red (0)            => colors (2),
					VGA_in_red (3 downto 1)   => "000",
					VGA_in_green (0)          => colors (1),
					VGA_in_green (3 downto 1) => "000",
					VGA_in_blue (0)           => colors (0),
					VGA_in_blue (3 downto 1)  => "000",
					col                       => cols,
					row                       => rows,
					VGA_out_red               => VGA_out_red,
					VGA_out_green             => VGA_out_green,
					VGA_out_blue              => VGA_out_blue,
					hsync                     => hsync,
					vsync                     => vsync);
					
u3 : asdasda
  PORT MAP (
    a => address,
	 d => datamem_rx,
    clk => transmitter_ck,
    we =>  not rx_done,
    spo => datamem_vga 
  );		

				  
	address <= adress_rx when rx_done='0' else adress_vga;	
				  
	clock_divider:PROCESS(clk)
   BEGIN
		IF clk'EVENT AND clk= '1' then 
		q <= q + 1 ;
		end if;
		end process clock_divider;

end Behavioral;

